<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Reader with Public Proxy</title>
    <style>
        #pdf-canvas {
            border: 1px solid black;
            width: 100%;
            max-width: 800px;
            height: auto;
        }
        #download-btn {
            margin-top: 10px;
        }
    </style>
</head>
<body>

<h2>Online PDF Reader</h2>
<input type="text" id="pdf-url" placeholder="Enter PDF URL" value="https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf">
<button id="load-pdf">Load PDF</button>
<canvas id="pdf-canvas"></canvas>
<br>
<button id="download-btn" style="display:none;">Download PDF</button>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
<script>
    let pdfBlob;

    document.getElementById('load-pdf').addEventListener('click', function () {
        const urlInput = document.getElementById('pdf-url').value;
        if (!urlInput) {
            alert('Please provide a PDF URL');
            return;
        }

        // Use All Origins proxy to fetch the PDF
        const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(urlInput)}`;

        // Fetch the PDF file via the All Origins proxy
        fetch(proxyUrl)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Network response was not ok: ${response.statusText}`);
                }
                return response.json(); // Expect JSON response containing the original content
            })
            .then(data => {
                const pdfData = data.contents; // Extract the PDF data from the response
                const blob = new Blob([pdfData], { type: 'application/pdf' }); // Create a Blob from the data
                pdfBlob = blob; // Save the blob for downloading later

                // Create a URL for the fetched blob
                const pdfUrl = URL.createObjectURL(blob);

                // Display the download button
                document.getElementById('download-btn').style.display = 'inline-block';
                document.getElementById('download-btn').addEventListener('click', () => downloadPDF());

                // Load and render the PDF via PDF.js
                const pdfjsLib = window['pdfjs-dist/build/pdf'];
                pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js';

                const canvas = document.getElementById('pdf-canvas');
                const context = canvas.getContext('2d');

                pdfjsLib.getDocument(pdfUrl).promise.then(function(pdfDoc_) {
                    // Render the first page
                    pdfDoc_.getPage(1).then(function(page) {
                        const viewport = page.getViewport({ scale: 1.5 });
                        canvas.height = viewport.height;
                        canvas.width = viewport.width;

                        const renderContext = {
                            canvasContext: context,
                            viewport: viewport
                        };
                        page.render(renderContext);
                    });
                }).catch(function (error) {
                    console.error('Error loading PDF:', error);
                    alert('Failed to load PDF. Please check if the URL is correct or the file is too large.');
                });
            })
            .catch(error => {
                console.error('Error fetching PDF:', error);
                alert(`Error fetching PDF: ${error.message}`);
            });
    });

    function downloadPDF() {
        if (pdfBlob) {
            const url = URL.createObjectURL(pdfBlob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'downloaded-file.pdf';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);  // Clean up
        }
    }
</script>

</body>
</html>
