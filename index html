<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Large File Document Reader (PDF.js Support)</title>
    <script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script> <!-- PDF.js library -->
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        #viewer {
            width: 100%;
            height: 500px;
            border: 1px solid #ccc;
            padding: 10px;
            overflow: auto;
        }
        canvas {
            width: 100%;
        }
    </style>
</head>
<body>

    <h1>Document Reader (Large Files with PDF.js Support)</h1>

    <div>
        <label for="url-input">Enter Document URL:</label>
        <input type="text" id="url-input" placeholder="Enter document URL here">
        <button id="load-url-btn">Download and Display</button>
    </div>

    <div>
        <label for="file-input">Select a Local File:</label>
        <input type="file" id="file-input">
    </div>

    <div id="viewer">Document content will be displayed here...</div>

    <script>
        const viewer = document.getElementById('viewer');
        const loadUrlBtn = document.getElementById('load-url-btn');
        const fileInput = document.getElementById('file-input');

        // Function to extract the actual URL from a redirect link
        function extractRealUrl(redirectUrl) {
            const urlParams = new URLSearchParams(new URL(redirectUrl).search);
            return urlParams.get('url') || redirectUrl;  // Extract the actual URL from the redirect URL
        }

        // Function to display the PDF using PDF.js
        function displayPDF(blob) {
            const loadingTask = pdfjsLib.getDocument(URL.createObjectURL(blob));
            loadingTask.promise.then(function(pdf) {
                // Fetch the first page
                pdf.getPage(1).then(function(page) {
                    const scale = 1.5;
                    const viewport = page.getViewport({ scale: scale });

                    // Prepare canvas using PDF page dimensions
                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;
                    viewer.innerHTML = ''; // Clear the viewer
                    viewer.appendChild(canvas);

                    // Render the PDF page into the canvas context
                    const renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };
                    page.render(renderContext);
                });
            }, function(error) {
                console.error('Error loading PDF:', error);
                viewer.textContent = 'Failed to load the PDF document.';
            });
        }

        // Function to fetch the file from a URL and display it
        async function fetchAndDisplayFile(url) {
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error("Failed to fetch the document");

                const blob = await response.blob();  // Read the response as a blob
                const contentType = response.headers.get("Content-Type");

                if (contentType.includes("application/pdf")) {
                    displayPDF(blob);  // Use PDF.js to display the PDF
                } else {
                    viewer.textContent = "Unsupported file type.";
                }
            } catch (error) {
                viewer.textContent = "Error downloading or displaying the document.";
                console.error("Error:", error);
            }
        }

        // Load and display document from URL
        loadUrlBtn.addEventListener('click', async () => {
            let url = document.getElementById('url-input').value;
            if (!url) {
                alert("Please enter a valid URL");
                return;
            }

            // Extract the real URL if it's a redirect URL
            url = extractRealUrl(url);

            // Fetch and display the file
            fetchAndDisplayFile(url);
        });

        // Load and display document from a local file
        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (!file) return;

            const fileType = file.type;
            const blob = file;  // Create a blob directly from the selected file

            if (fileType.includes("application/pdf")) {
                displayPDF(blob);  // Use PDF.js to display the local PDF
            } else {
                viewer.textContent = "Unsupported file type.";
            }
        });
    </script>
</body>
</html>
